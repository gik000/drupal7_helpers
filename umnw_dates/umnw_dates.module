<?php

/**
 * Implements hook_theme_registry_alter().
 */
function umnw_dates_theme_registry_alter(&$theme_registry) {
  $theme_registry['date_time_ago']['function'] = 'theme_gik_date_time_ago';
}

/**
 * Returns HTML for a date in the format 'time ago'.
 */
function theme_gik_date_time_ago($variables) {
  $start_date = $variables['start_date'];
  $end_date = $variables['end_date'];
  $interval = !empty($variables['interval']) ? $variables['interval'] : 2;
  $display = isset($variables['interval_display']) ? $variables['interval_display'] : 'time ago';

  // If no date is sent, then return nothing.
  if (empty($start_date) || empty($end_date)) {
    return;
  }

  // Time to compare dates to.
  $now = date_format(date_now(), DATE_FORMAT_UNIX);
  $start = date_format($start_date, DATE_FORMAT_UNIX);

  // Will be positive for a datetime in the past (ago), and negative for a datetime in the future (hence).
  $time_diff = $now - $start;

  if($time_diff<=0){
    // Uses the same options used by Views format_interval.
    switch ($display) {
      case 'raw time ago':
        return format_interval($time_diff, $interval);

      case 'time ago':
        return t('%time ago', array('%time' => format_interval($time_diff, $interval)));

      case 'raw time hence':
        return format_interval(-$time_diff, $interval);

      case 'time hence':
        return t('%time hence', array('%time' => format_interval(-$time_diff, $interval)));

      case 'raw time span':
        return ($time_diff < 0 ? '-' : '') . format_interval(abs($time_diff), $interval);

      case 'inverse time span':
        return ($time_diff > 0 ? '-' : '') . format_interval(abs($time_diff), $interval);

      case 'time span':
        return t(($time_diff < 0 ? '%time hence' : '%time ago'), array('%time' => format_interval(abs($time_diff), $interval)));
    }
  } else {
    //out of date
    return t('Expired');
  }
}
